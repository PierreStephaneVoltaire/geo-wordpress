pipeline {
    agent any
    parameters {
        // Instance configuration
        choice(
            name: 'INSTANCE_TYPE',
            choices: ['t3.micro', 't3.small', 't3.medium', 't3.large'],
            description: 'EC2 instance type for WordPress servers'
        )
        string(name: 'EBS_VOLUME_SIZE', defaultValue: '20', description: 'EBS volume size in GB for EC2 instances')
        string(name: 'ADMIN_EMAIL', defaultValue: 'pvoltaire96@gmail.com', description: 'WordPress admin email address')
        
        // Database configuration
        choice(
            name: 'DB_INSTANCE_CLASS',
            choices: ['db.t3.micro', 'db.t3.small', 'db.t3.medium', 'db.t3.large', 'db.t4g.micro', 'db.t4g.small', 'db.t4g.medium'],
            description: 'RDS instance class for MariaDB database'
        )
        string(name: 'DB_ALLOCATED_STORAGE', defaultValue: '20', description: 'Initial allocated storage for RDS in GB')
        string(name: 'DB_MAX_ALLOCATED_STORAGE', defaultValue: '100', description: 'Maximum allocated storage for RDS autoscaling in GB')
        string(name: 'DB_NAME', defaultValue: 'wordpress', description: 'Database name')
        choice(
            name: 'DB_ENGINE_VERSION',
            choices: ['10.11.8', '10.11.9', '10.6.16', '10.6.17'],
            description: 'MariaDB engine version'
        )
        
        // Singapore region capacity
        string(name: 'SINGAPORE_MIN_SIZE', defaultValue: '0', description: 'Minimum instances in Singapore ASG')
        string(name: 'SINGAPORE_MAX_SIZE', defaultValue: '4', description: 'Maximum instances in Singapore ASG')
        string(name: 'SINGAPORE_DESIRED_CAPACITY', defaultValue: '2', description: 'Desired instances in Singapore ASG')
        
        // Ireland region capacity
        string(name: 'IRELAND_MIN_SIZE', defaultValue: '0', description: 'Minimum instances in Ireland ASG')
        string(name: 'IRELAND_MAX_SIZE', defaultValue: '4', description: 'Maximum instances in Ireland ASG')
        string(name: 'IRELAND_DESIRED_CAPACITY', defaultValue: '1', description: 'Desired instances in Ireland ASG')
        
        // Geoblocking (optional)
        text(
            name: 'GEOBLOCKING_COUNTRIES',
            defaultValue: '',
            description: 'Comma-separated list of country codes to block (e.g., CN,RU,KP). Leave empty to allow all countries.'
        )
    }
    environment {
        TF_VAR_instance_type = "${params.INSTANCE_TYPE}"
        TF_VAR_admin_email = "${params.ADMIN_EMAIL}"
        // Convert comma-separated string to JSON array for Terraform
        TF_VAR_geoblocking_countries = "${params.GEOBLOCKING_COUNTRIES ? '[\"' + params.GEOBLOCKING_COUNTRIES.split(',').join('\",\"') + '\"]' : '[]'}"
    }
    stages {
        stage('Prepare Variables') {
            steps {
                script {
                    // Validate Singapore capacity values
                    def sgMinSize = params.SINGAPORE_MIN_SIZE.toInteger()
                    def sgMaxSize = params.SINGAPORE_MAX_SIZE.toInteger()
                    def sgDesiredCapacity = params.SINGAPORE_DESIRED_CAPACITY.toInteger()
                    
                    if (sgMinSize > sgDesiredCapacity || sgDesiredCapacity > sgMaxSize) {
                        error "Singapore capacity validation failed: min_size (${sgMinSize}) <= desired_capacity (${sgDesiredCapacity}) <= max_size (${sgMaxSize})"
                    }
                    
                    // Validate Ireland capacity values
                    def ieMinSize = params.IRELAND_MIN_SIZE.toInteger()
                    def ieMaxSize = params.IRELAND_MAX_SIZE.toInteger()
                    def ieDesiredCapacity = params.IRELAND_DESIRED_CAPACITY.toInteger()
                    
                    if (ieMinSize > ieDesiredCapacity || ieDesiredCapacity > ieMaxSize) {
                        error "Ireland capacity validation failed: min_size (${ieMinSize}) <= desired_capacity (${ieDesiredCapacity}) <= max_size (${ieMaxSize})"
                    }
                    
                    // Create region capacity configuration JSON
                    def regionCapacityConfig = [
                        singapore: [
                            min_size: sgMinSize,
                            max_size: sgMaxSize,
                            desired_capacity: sgDesiredCapacity
                        ],
                        ireland: [
                            min_size: ieMinSize,
                            max_size: ieMaxSize,
                            desired_capacity: ieDesiredCapacity
                        ]
                    ]
                    
                    // Write region capacity config to tfvars file
                    writeFile file: 'infra/pipeline.auto.tfvars', text: """
instance_type = "${params.INSTANCE_TYPE}"
ebs_volume_size = ${params.EBS_VOLUME_SIZE}
admin_email = "${params.ADMIN_EMAIL}"
db_instance_class = "${params.DB_INSTANCE_CLASS}"
db_allocated_storage = ${params.DB_ALLOCATED_STORAGE}
db_max_allocated_storage = ${params.DB_MAX_ALLOCATED_STORAGE}
db_name = "${params.DB_NAME}"
db_engine_version = "${params.DB_ENGINE_VERSION}"
region_capacity_config = ${groovy.json.JsonBuilder(regionCapacityConfig).toPrettyString()}
geoblocking_countries = ${params.GEOBLOCKING_COUNTRIES ? '[' + params.GEOBLOCKING_COUNTRIES.split(',').collect { "\"${it.trim()}\"" }.join(',') + ']' : '[]'}
"""
                    
                    echo "Configuration validated successfully:"
                    echo "Singapore: min=${sgMinSize}, desired=${sgDesiredCapacity}, max=${sgMaxSize}"
                    echo "Ireland: min=${ieMinSize}, desired=${ieDesiredCapacity}, max=${ieMaxSize}"
                }
            }
        }
        stage('Init') {
            steps {
                dir('infra') {
                    sh 'terraform init'
                }
            }
        }
        stage('Validate') {
            steps {
                dir('infra') {
                    sh 'terraform validate'
                }
            }
        }
        stage('Plan') {
            steps {
                dir('infra') {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }
        stage('Approval') {
            steps {
                input message: 'Apply Terraform changes?'
            }
        }
        stage('Apply') {
            steps {
                dir('infra') {
                    sh 'terraform apply -auto-approve tfplan'
                }
            }
        }
    }
}
